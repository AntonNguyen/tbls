package md

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"testing"

	"github.com/k1LoW/tbls/schema"
)

func TestOutput(t *testing.T) {
	s := newTestSchema()
	tempDir, _ := ioutil.TempDir("", "tbls")
	force := true
	adjust := false
	erFormat := "png"
	defer os.RemoveAll(tempDir)
	err := Output(s, tempDir, force, adjust, erFormat)
	if err != nil {
		t.Error(err)
	}
	expected := `# testschema

## Tables

| Name | Columns | Comment | Type |
| ---- | ------- | ------- | ---- |
| [a](a.md) | 2 | table a |  |
| [b](b.md) | 2 | table b |  |



---

> Generated by [tbls](https://github.com/k1LoW/tbls)`
	content, err := ioutil.ReadFile(filepath.Join(tempDir, "README.md"))
	if err != nil {
		log.Fatal(err)
	}
	actual := string(content)
	if actual != expected {
		t.Errorf("actual %v\nwant %v", actual, expected)
	}

	expected2 := `# a

## Description

table a

## Columns

| Name | Type | Default | Nullable | Children | Parents | Comment |
| ---- | ---- | ------- | -------- | -------- | ------- | ------- |
| a |  |  | false |  | [b](b.md) | column a |
| a2 |  |  | false |  |  | column a2 |









---

> Generated by [tbls](https://github.com/k1LoW/tbls)`
	content2, err := ioutil.ReadFile(filepath.Join(tempDir, "a.md"))
	if err != nil {
		log.Fatal(err)
	}
	actual2 := string(content2)
	if actual2 != expected2 {
		t.Errorf("actual %v\nwant %v", actual2, expected2)
	}
}

func newTestSchema() *schema.Schema {
	ca := &schema.Column{
		Name:    "a",
		Comment: "column a",
	}
	cb := &schema.Column{
		Name:    "b",
		Comment: "column b",
	}

	ta := &schema.Table{
		Name:    "a",
		Comment: "table a",
		Columns: []*schema.Column{
			ca,
			&schema.Column{
				Name:    "a2",
				Comment: "column a2",
			},
		},
	}
	tb := &schema.Table{
		Name:    "b",
		Comment: "table b",
		Columns: []*schema.Column{
			cb,
			&schema.Column{
				Name:    "b2",
				Comment: "column b2",
			},
		},
	}
	r := &schema.Relation{
		Table:         ta,
		Columns:       []*schema.Column{ca},
		ParentTable:   tb,
		ParentColumns: []*schema.Column{cb},
	}
	ca.ParentRelations = []*schema.Relation{r}
	cb.ChildRelations = []*schema.Relation{r}

	s := &schema.Schema{
		Name: "testschema",
		Tables: []*schema.Table{
			ta,
			tb,
		},
		Relations: []*schema.Relation{
			r,
		},
	}
	return s
}
